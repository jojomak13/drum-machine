{"version":3,"sources":["components/HomeComponent.js","App.js","serviceWorker.js","index.js"],"names":["HomeComponent","props","state","display","handleKey","bind","handleButton","e","audio","target","tagName","children","nextSibling","play","this","setState","id","replace","document","addEventListener","Array","from","getElementById","forEach","el","parseInt","keyCode","keys","data","map","key","code","onClick","className","src","url","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAgEeA,E,YA5Db,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACTC,QAAS,OAGb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPJ,E,uEAURE,GACN,IAAIC,EAA6B,QAArBD,EAAEE,OAAOC,QAAmBH,EAAEE,OAAOE,SAAS,GAAKJ,EAAEE,OAAOG,YACxEJ,EAAMK,OAENC,KAAKC,SAAS,CACZZ,QAASK,EAAMQ,GAAGC,QAAQ,IAAK,S,mCAIxBV,GACX,IAAIC,EAAQD,EAAEI,SAAS,GACvBH,EAAMK,OACNC,KAAKC,SAAS,CACZZ,QAASK,EAAMQ,GAAGC,QAAQ,IAAK,S,0CAIf,IAAD,OACjBC,SAASC,iBAAiB,UAAW,SAACZ,GACpCa,MAAMC,KAAKH,SAASI,eAAe,YAAYX,UAAUY,QAAQ,SAAAC,GAC5DC,SAASD,EAAGR,MAAQT,EAAEmB,SAAU,EAAKpB,aAAakB,S,+BAKlD,IAAD,OAEAG,EAAOb,KAAKb,MAAM2B,KAAKC,IAAI,SAAAL,GAC/B,OACE,yBAAKM,IAAMN,EAAGO,KAAOf,GAAIQ,EAAGO,KAAMC,QAAU,EAAK5B,UAAY6B,UAAU,YACrE,8BAAQT,EAAGM,KACX,2BAAOd,GAAKQ,EAAGM,IAAMG,UAAU,OAAOC,IAAMV,EAAGW,SAKrD,OACE,yBAAKF,UAAU,aACb,4CACA,yBAAKjB,GAAG,gBACN,yBAAKA,GAAG,WAAU,4BAAMF,KAAKZ,MAAMC,UACnC,yBAAKa,GAAG,YACJW,S,GAtDcS,IAAMC,WCC5BT,EAAO,CACX,CACEG,KAAM,GACND,IAAK,IACLK,IAAK,4DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,4DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,4DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,8DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,4DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,0DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,8DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,8DACJ,CACDJ,KAAM,GACND,IAAK,IACLK,IAAK,2DAYMG,MARf,WACE,OACE,yBAAKL,UAAU,aACb,kBAAC,EAAD,CAAML,KAAMA,MClCEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASI,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.7e2dabf8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass HomeComponent extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        display: '...',\r\n    }\r\n\r\n    this.handleKey = this.handleKey.bind(this)\r\n    this.handleButton = this.handleButton.bind(this)\r\n  }\r\n\r\n  handleKey(e){\r\n      let audio = e.target.tagName === 'DIV'? e.target.children[1] : e.target.nextSibling;\r\n      audio.play();\r\n\r\n      this.setState({\r\n        display: audio.id.replace('-', ' ')\r\n      })\r\n  }\r\n\r\n  handleButton(e){\r\n    let audio = e.children[1];\r\n    audio.play();\r\n    this.setState({\r\n      display: audio.id.replace('-', ' ')\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('keydown', (e) => {\r\n      Array.from(document.getElementById('keyboard').children).forEach(el => {\r\n        if(parseInt(el.id) === e.keyCode)  this.handleButton(el)\r\n      });\r\n    })\r\n  }\r\n\r\n  render(){\r\n\r\n    const keys = this.props.data.map(el => {\r\n      return (\r\n        <div key={ el.code } id={el.code} onClick={ this.handleKey } className=\"drum-pad\">\r\n          <span>{ el.key }</span>\r\n          <audio id={ el.key } className=\"clip\" src={ el.url } />\r\n        </div>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <div className=\"card mt-3\">\r\n        <h1>Drum Machine</h1>\r\n        <div id=\"drum-machine\">\r\n          <div id=\"display\"><h3>{ this.state.display }</h3></div>\r\n          <div id=\"keyboard\">\r\n            { keys }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeComponent\r\n","import React from 'react';\nimport Home from './components/HomeComponent';\n\nconst data = [\n  {\n    code: 81,\n    key: 'Q',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    code: 87,\n    key: 'W',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    code: 69,\n    key: 'E',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    code: 65,\n    key: 'A',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    code: 83,\n    key: 'S',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    code: 68,\n    key: 'D',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    code: 90,\n    key: 'Z',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    code: 88,\n    key: 'X',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    code: 67,\n    key: 'C',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Home data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}